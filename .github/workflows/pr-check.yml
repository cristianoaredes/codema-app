name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docker: ${{ steps.changes.outputs.docker }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect file changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          frontend:
            - 'src/**'
            - 'public/**'
            - 'package*.json'
            - 'vite.config.ts'
            - 'tsconfig*.json'
          backend:
            - 'supabase/**'
            - 'scripts/database/**'
          docker:
            - 'Dockerfile'
            - 'docker-compose*.yml'
            - '.dockerignore'

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check code formatting
      run: npx prettier --check src/

    - name: Run ESLint
      run: npm run lint

    - name: Type checking
      run: npx tsc --noEmit

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Comment PR with coverage
      uses: romeovs/lcov-reporter-action@v0.3.1
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Check bundle size
      run: |
        echo "üì¶ Bundle size analysis:"
        du -sh dist/
        find dist/assets -name "*.js" -exec ls -lh {} \; | sort -k5 -hr | head -10

  docker-check:
    name: Docker Build Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.frontend == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: codema-app:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Security audit
      run: npm audit --audit-level=moderate

    - name: Dependency vulnerability scan
      run: npx audit-ci --moderate
      continue-on-error: true

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-check, docker-check, security-check]
    if: always()

    steps:
    - name: Create PR summary comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## üîç PR Checks Summary')
          );

          const lintStatus = '${{ needs.lint-and-test.result }}';
          const buildStatus = '${{ needs.build-check.result }}';
          const dockerStatus = '${{ needs.docker-check.result }}';
          const securityStatus = '${{ needs.security-check.result }}';

          const getStatusEmoji = (status) => {
            switch (status) {
              case 'success': return '‚úÖ';
              case 'failure': return '‚ùå';
              case 'skipped': return '‚è≠Ô∏è';
              default: return '‚ö†Ô∏è';
            }
          };

          const body = `## üîç PR Checks Summary

          | Check | Status |
          |-------|--------|
          | Lint & Test | ${getStatusEmoji(lintStatus)} ${lintStatus} |
          | Build | ${getStatusEmoji(buildStatus)} ${buildStatus} |
          | Docker | ${getStatusEmoji(dockerStatus)} ${dockerStatus} |
          | Security | ${getStatusEmoji(securityStatus)} ${securityStatus} |

          **Last updated:** ${new Date().toISOString()}
          `;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }