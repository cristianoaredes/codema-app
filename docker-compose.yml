version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - NODE_ENV=development
    container_name: codema-app
    ports:
      - "8080:8080"      # Vite dev server
      - "24678:24678"    # Vite HMR WebSocket
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src:delegated
      - ./public:/app/public:delegated
      - ./index.html:/app/index.html:delegated
      - ./vite.config.ts:/app/vite.config.ts:delegated
      - ./tailwind.config.ts:/app/tailwind.config.ts:delegated
      - ./tsconfig.json:/app/tsconfig.json:delegated
      - ./postcss.config.js:/app/postcss.config.js:delegated
      # Persist node_modules
      - node_modules:/app/node_modules
      # Vite cache for faster rebuilds
      - vite_cache:/app/node_modules/.vite
    environment:
      - NODE_ENV=development
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      # Optional: Local development database
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/codema_dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - codema-network
    restart: unless-stopped
    stdin_open: true
    tty: true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database for local development
  postgres:
    image: postgres:15-alpine
    container_name: codema-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=codema_dev
      # Performance tuning
      - POSTGRES_MAX_CONNECTIONS=100
      - POSTGRES_SHARED_BUFFERS=256MB
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Initialize database with migrations
      - ./supabase/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - codema-network
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Optional: Supabase Studio for local development
  # Uncomment if you want to use Supabase locally
  # supabase-studio:
  #   image: supabase/studio:latest
  #   container_name: codema-supabase-studio
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - STUDIO_PG_META_URL=http://postgres:5432
  #     - POSTGRES_PASSWORD=postgres
  #   depends_on:
  #     - postgres
  #   networks:
  #     - codema-network
  #   restart: unless-stopped

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: codema-adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - codema-network
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Optional: Redis for caching (if needed in future)
  # redis:
  #   image: redis:7-alpine
  #   container_name: codema-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - codema-network
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes

volumes:
  node_modules:
    driver: local
  vite_cache:
    driver: local
  postgres_data:
    driver: local
  # redis_data:
  #   driver: local

networks:
  codema-network:
    driver: bridge