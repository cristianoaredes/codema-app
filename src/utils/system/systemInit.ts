/**
 * Inicializa√ß√£o do Sistema de Robustez e Monitoramento
 * Configura todos os sistemas de monitoramento, m√©tricas e health checks
 */

import { initializeMetrics } from '@/utils';
import { startHealthMonitoring } from '@/utils';

/**
 * Configura√ß√µes do sistema
 */
const SYSTEM_CONFIG = {
  healthCheckInterval: 60000, // 1 minuto
  metricsCleanupInterval: 3600000, // 1 hora
  enableConsoleLogging: true,
  enablePerformanceTracking: true
};

/**
 * Estado do sistema
 */
let systemInitialized = false;
let healthMonitoringStop: (() => void) | null = null;

/**
 * Inicializa todos os sistemas de monitoramento
 */
export const initializeSystemMonitoring = async (): Promise<void> => {
  if (systemInitialized) {
    console.warn('‚ö†Ô∏è Sistema de monitoramento j√° foi inicializado');
    return;
  }

  try {
    console.log('üöÄ Inicializando sistema de robustez e monitoramento...');

    // 1. Inicializar coleta de m√©tricas
    initializeMetrics();
    console.log('‚úÖ Sistema de m√©tricas inicializado');

    // 2. Iniciar monitoramento de sa√∫de
    healthMonitoringStop = startHealthMonitoring(SYSTEM_CONFIG.healthCheckInterval);
    console.log('‚úÖ Monitoramento de sa√∫de iniciado');

    // 3. Configurar listeners de eventos globais
    setupGlobalErrorHandling();
    console.log('‚úÖ Tratamento global de erros configurado');

    // 4. Configurar monitoramento de performance
    if (SYSTEM_CONFIG.enablePerformanceTracking) {
      setupPerformanceMonitoring();
      console.log('‚úÖ Monitoramento de performance ativado');
    }

    systemInitialized = true;
    console.log('üéØ Sistema de monitoramento totalmente inicializado');

  } catch (error) {
    console.error('‚ùå Erro ao inicializar sistema de monitoramento:', error);
    throw error;
  }
};

/**
 * Configura tratamento global de erros
 */
const setupGlobalErrorHandling = (): void => {
  // Erros n√£o capturados
  window.addEventListener('error', (event) => {
    console.error('üö® Erro global capturado:', event.error);
    
    // Registrar no sistema de m√©tricas se dispon√≠vel
    if (typeof window !== 'undefined' && (window as any).metricsCollector) {
      (window as any).metricsCollector.recordError(
        event.error || 'Unknown error',
        'global',
        'high',
        {
          filename: event.filename,
          lineno: event.lineno,
          colno: event.colno
        }
      );
    }
  });

  // Promises rejeitadas n√£o capturadas
  window.addEventListener('unhandledrejection', (event) => {
    console.error('üö® Promise rejeitada n√£o capturada:', event.reason);
    
    // Registrar no sistema de m√©tricas se dispon√≠vel
    if (typeof window !== 'undefined' && (window as any).metricsCollector) {
      (window as any).metricsCollector.recordError(
        event.reason || 'Unhandled promise rejection',
        'global',
        'high',
        {
          type: 'unhandledrejection'
        }
      );
    }
  });
};

/**
 * Configura monitoramento de performance
 */
const setupPerformanceMonitoring = (): void => {
  // Monitorar Web Vitals se dispon√≠vel
  if ('PerformanceObserver' in window) {
    try {
      // Largest Contentful Paint (LCP)
      const lcpObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            console.log('üìä LCP:', entry.startTime);
          }
        }
      });
      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

      // First Input Delay (FID)
      const fidObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'first-input') {
            console.log('üìä FID:', (entry as any).processingStart - entry.startTime);
          }
        }
      });
      fidObserver.observe({ entryTypes: ['first-input'] });

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao configurar PerformanceObserver:', error);
    }
  }

  // Monitorar navega√ß√£o
  if ('navigation' in performance) {
    const navTiming = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navTiming) {
      console.log('üìä Navigation Timing:', {
        domContentLoaded: navTiming.domContentLoadedEventEnd - navTiming.domContentLoadedEventStart,
        loadComplete: navTiming.loadEventEnd - navTiming.loadEventStart,
        totalTime: navTiming.loadEventEnd - navTiming.fetchStart
      });
    }
  }
};

/**
 * Para o sistema de monitoramento
 */
export const stopSystemMonitoring = (): void => {
  if (!systemInitialized) {
    console.warn('‚ö†Ô∏è Sistema de monitoramento n√£o foi inicializado');
    return;
  }

  try {
    // Parar monitoramento de sa√∫de
    if (healthMonitoringStop) {
      healthMonitoringStop();
      healthMonitoringStop = null;
    }

    systemInitialized = false;
    console.log('üõë Sistema de monitoramento parado');
  } catch (error) {
    console.error('‚ùå Erro ao parar sistema de monitoramento:', error);
  }
};

/**
 * Verifica se o sistema est√° inicializado
 */
export const isSystemInitialized = (): boolean => {
  return systemInitialized;
};

/**
 * Obt√©m configura√ß√µes do sistema
 */
export const getSystemConfig = () => {
  return { ...SYSTEM_CONFIG };
};

/**
 * Atualiza configura√ß√µes do sistema
 */
export const updateSystemConfig = (newConfig: Partial<typeof SYSTEM_CONFIG>): void => {
  Object.assign(SYSTEM_CONFIG, newConfig);
  console.log('‚öôÔ∏è Configura√ß√µes do sistema atualizadas:', newConfig);
};

/**
 * Hook para inicializa√ß√£o autom√°tica no React
 */
export const useSystemInitialization = () => {
  const initialize = async () => {
    if (!isSystemInitialized()) {
      await initializeSystemMonitoring();
    }
  };

  const cleanup = () => {
    if (isSystemInitialized()) {
      stopSystemMonitoring();
    }
  };

  return { initialize, cleanup, isInitialized: isSystemInitialized };
};
